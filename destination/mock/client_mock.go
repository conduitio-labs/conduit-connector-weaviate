// Code generated by MockGen. DO NOT EDIT.
// Source: destination.go
//
// Generated by this command:
//
//	mockgen -source=destination.go -package=mock -destination=mock/client_mock.go -mock_names=weaviateClient=WeaviateClient . weaviateClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	weaviate "github.com/conduitio-labs/conduit-connector-weaviate/destination/weaviate"
	gomock "go.uber.org/mock/gomock"
)

// WeaviateClient is a mock of weaviateClient interface.
type WeaviateClient struct {
	ctrl     *gomock.Controller
	recorder *WeaviateClientMockRecorder
}

// WeaviateClientMockRecorder is the mock recorder for WeaviateClient.
type WeaviateClientMockRecorder struct {
	mock *WeaviateClient
}

// NewWeaviateClient creates a new mock instance.
func NewWeaviateClient(ctrl *gomock.Controller) *WeaviateClient {
	mock := &WeaviateClient{ctrl: ctrl}
	mock.recorder = &WeaviateClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *WeaviateClient) EXPECT() *WeaviateClientMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *WeaviateClient) Delete(arg0 context.Context, arg1 *weaviate.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *WeaviateClientMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*WeaviateClient)(nil).Delete), arg0, arg1)
}

// Insert mocks base method.
func (m *WeaviateClient) Insert(arg0 context.Context, arg1 *weaviate.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *WeaviateClientMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*WeaviateClient)(nil).Insert), arg0, arg1)
}

// Open mocks base method.
func (m *WeaviateClient) Open(arg0 weaviate.Config) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *WeaviateClientMockRecorder) Open(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*WeaviateClient)(nil).Open), arg0)
}

// Update mocks base method.
func (m *WeaviateClient) Update(arg0 context.Context, arg1 *weaviate.Object) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *WeaviateClientMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*WeaviateClient)(nil).Update), arg0, arg1)
}
